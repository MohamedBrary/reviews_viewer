%p.lead This is a Rails 6 MVP for product reviews viewing

%h4 Database Content
%ul
  - @database_info.each do |key, value|
    %li= "#{key.to_s.titleize}: #{value} rows"
  %li= "Total: #{@database_info.values.sum} rows"

%h4 API Get Endpoints
%ul
  %li
    %a{ href: "/reviews.json?per_page=5&page=4", target: :_blank }
      Listing Reviews
    %i
      %a{ href: "/reviews?per_page=5&page=4", target: :_blank }
        (check same result on html)
  %li
    - query = ReviewTheme.last.category_id
    %a{ href: "/reviews.json?category_ids[]=#{query}", target: :_blank }
      Listing Reviews with category_id filtering
    %i
      %a{ href: "/reviews?category_ids[]=#{query}", target: :_blank }
        (check same result on html)
  %li
    - query = ReviewTheme.last.theme_id
    %a{ href: "/reviews.json?theme_ids[]=#{query}", target: :_blank }
      Listing Reviews with theme_id filtering
    %i
      %a{ href: "/reviews?theme_ids[]=#{query}", target: :_blank }
        (check same result on html)
  %li
    - query = Review.last.comment.split.sample
    %a{ href: "/reviews.json?comment=#{query}", target: :_blank }
      Listing Reviews with comment filtering
    %i
      %a{ href: "/reviews?comment=#{query}", target: :_blank }
        (check same result on html)
  %li
    %a{ href: '/reviews/categories_sentiment_average.json', target: :_blank }
      Average sentiment per category
  %li
    %a{ href: '/reviews/themes_sentiment_average.json', target: :_blank }
      Average sentiment per theme

%h4 Generate More Reviews
= form_tag '/reviews/generate', :method => :post, class: 'form-inline' do
  .form-group.mx-sm-3.mb-2
    %label.sr-only{:for => "categories_num"} Categories No.
    %input#categories_num.form-control{:placeholder => "Categories No. (3 by default)", name: 'categories_num'}/
  .form-group.mx-sm-3.mb-2
    %label.sr-only{:for => "reviews_num"} Reviews No.
    %input#reviews_num.form-control{:placeholder => "Reviews No. (1000 by default)", name: 'reviews_num'}/
  %button.btn.btn-primary.mb-2{:type => "submit"} Generate
%hr

%h4 Commentary & TODOs
%ul
  %li I wanted to use Rails 6, and had some issues with sprockets version and webpack usage
  %li I wanted to test the performance of both Postgres database vs Elasticsearch, and see how both would scale against different data sizes
  %li
    I used Postgres indexes (nice SO thread
    = succeed ")" do
      %a{:href => "https://stackoverflow.com/questions/1566717/postgresql-like-query-performance-variations"} here
    %ul
      %li My understanding that we value retrieval over creating performance, as I would assume that creating reviews and processing them is a background job, while retrieving data and statistics is a client facing feature, and it is vital to be responsive.
  %li I used ElasticSearch, and created a denormalized index suitable for the queries we need
  %li I created some data generators and fakers to be able to generate different sizes of data, and have better benchmarks for querying against postgres vs elasticsearch
  %li TODO Adding Rubocop, and have better test coverage for the service classes
  %li TODO Formatting the API result need a better look, following any specification, would be much better, like JsonAPI for example
  %li
    TODO Add support to
    = succeed "," do
      %a{:href => "https://bonsai.io/blog/testing-elasticsearch-ruby-gems.html"} test elasticsearch
%hr

%h4 Postgres vs. ElasticSearch Querying Benchmark
%pre.sh
  %code
    :preserve
      rake data:benchmark
      Benchmarking 100 sample queries for {:categories_num=>169, :reviews_num=>8032692}, yielded these results:
      Total time spent in database 0.031034868443384767
                      Vs. in index 0.008404920226894319
      So time in database was 3.69x in index!
%ul
  %li I implemented data generators that would generate a near-real full records, with all relations and fields are set properly
  %li More than 8M reviews were generated locally, with categories and themes
  %li The above benchmark is based on 100 queries that filter on review comment, category ids, and theme ids
  %li Each query was random, so it doesn't run the same query 100 times (I noticed Elasticsearch would out-perform PG drastically in case of repeated queries, maybe better caching, but can be tuned in PG if it is an actual real usage case )
  %li Definitely this isn't 100% accurate, and not a verdict, but would agree with the general notion of having Postgres as the data store, while using search engine for indexing and querying data, is one of the easy steps for scaling
  %li I do believe that most modern systems can be utilized in a way to scale with great performance, but it is a matter of which state the product in, and what are the available resources we can spare
%hr

%a.btn.btn-primary{ href: 'https://github.com/MohamedBrary/reviews_viewer', target: :_blank }
  Github Repository

%a.btn.btn-primary{ href: '/api/docs', target: :_blank }
  API Documentation

- unless Rails.env.production?
  %a.btn.btn-success{ href: 'https://reviews-viewer.herokuapp.com', target: :_blank }
    Heroku Application
%br
%br
%br
